// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKEDVEC3F_PKNX_STRUCTURES_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_PACKEDVEC3F_PKNX_STRUCTURES_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace pkNX {
namespace Structures {
namespace FlatBuffers {

struct PackedVec3f;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) PackedVec3f FLATBUFFERS_FINAL_CLASS {
 private:
  float X_;
  float Y_;
  float Z_;

 public:
  PackedVec3f()
      : X_(0),
        Y_(0),
        Z_(0) {
  }
  PackedVec3f(float _X, float _Y, float _Z)
      : X_(::flatbuffers::EndianScalar(_X)),
        Y_(::flatbuffers::EndianScalar(_Y)),
        Z_(::flatbuffers::EndianScalar(_Z)) {
  }
  float X() const {
    return ::flatbuffers::EndianScalar(X_);
  }
  float Y() const {
    return ::flatbuffers::EndianScalar(Y_);
  }
  float Z() const {
    return ::flatbuffers::EndianScalar(Z_);
  }
};
FLATBUFFERS_STRUCT_END(PackedVec3f, 12);

}  // namespace FlatBuffers
}  // namespace Structures
}  // namespace pkNX

#endif  // FLATBUFFERS_GENERATED_PACKEDVEC3F_PKNX_STRUCTURES_FLATBUFFERS_H_
